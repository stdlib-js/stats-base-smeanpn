{"version":3,"file":"index.mjs","sources":["../lib/smeanpn.js","../lib/ndarray.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\nimport ssumpw from '@stdlib/blas-ext-base-ssumpw' ;\nimport sapxsumpw from '@stdlib/blas-ext-base-sapxsumpw' ;\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a single-precision floating-point strided array using a two-pass error correction algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a two-pass approach, as suggested by Neely (1966).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496–99. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} arithmetic mean\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = smeanpn( N, x, 1 );\n* // returns ~0.3333\n*/\nfunction smeanpn( N, x, stride ) {\n\tvar mu;\n\tvar c;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\t// Compute an estimate for the mean:\n\tmu = float64ToFloat32( ssumpw( N, x, stride ) / N );\n\n\t// Compute an error term:\n\tc = float64ToFloat32( sapxsumpw( N, -mu, x, stride ) / N );\n\n\treturn float64ToFloat32( mu + c );\n}\n\n\n// EXPORTS //\n\nexport default smeanpn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\nimport { ndarray as ssumpw } from '@stdlib/blas-ext-base-ssumpw' ;\nimport { ndarray as sapxsumpw } from '@stdlib/blas-ext-base-sapxsumpw' ;\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a single-precision floating-point strided array using a two-pass error correction algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a two-pass approach, as suggested by Neely (1966).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496–99. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} arithmetic mean\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = smeanpn( N, x, 2, 1 );\n* // returns 1.25\n*/\nfunction smeanpn( N, x, stride, offset ) {\n\tvar mu;\n\tvar c;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\t// Compute an estimate for the mean:\n\tmu = float64ToFloat32( ssumpw( N, x, stride, offset ) / N );\n\n\t// Compute an error term:\n\tc = float64ToFloat32( sapxsumpw( N, -mu, x, stride, offset ) / N );\n\n\treturn float64ToFloat32( mu + c );\n}\n\n\n// EXPORTS //\n\nexport default smeanpn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport smeanpn from './smeanpn.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( smeanpn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default smeanpn;\n"],"names":["smeanpn","N","x","stride","mu","c","NaN","float64ToFloat32","ssumpw","sapxsumpw","offset","setReadOnly","ndarray"],"mappings":";;ubAuDA,SAASA,EAASC,EAAGC,EAAGC,GACvB,IAAIC,EACAC,EAEJ,OAAKJ,GAAK,EACFK,IAEG,IAANL,GAAsB,IAAXE,EACRD,EAAG,IAGXE,EAAKG,EAAkBC,EAAQP,EAAGC,EAAGC,GAAWF,GAGhDI,EAAIE,EAAkBE,EAAWR,GAAIG,EAAIF,EAAGC,GAAWF,GAEhDM,EAAkBH,EAAKC,GAC/B,CCfA,SAASL,EAASC,EAAGC,EAAGC,EAAQO,GAC/B,IAAIN,EACAC,EAEJ,OAAKJ,GAAK,EACFK,IAEG,IAANL,GAAsB,IAAXE,EACRD,EAAGQ,IAGXN,EAAKG,EAAkBC,EAAQP,EAAGC,EAAGC,EAAQO,GAAWT,GAGxDI,EAAIE,EAAkBE,EAAWR,GAAIG,EAAIF,EAAGC,EAAQO,GAAWT,GAExDM,EAAkBH,EAAKC,GAC/B,CC7CAM,EAAAX,EAAA,UAAAY"}